import pytest
from unittest.mock import patch, AsyncMock, MagicMock
from aiogram import Dispatcher
from commands.basic import register_basic_commands
from commands.admin import register_admin_commands
from config import VERSION


class TestBasicCommands:
    """–¢–µ—Å—Ç—ã –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥"""

    @pytest.mark.asyncio
    async def test_start_command_response(self, mock_admin_message):
        """–¢–µ—Å—Ç: –∫–æ–º–∞–Ω–¥–∞ /start –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç"""
        from commands.basic import start_handler
        
        # –ú–æ–∫–∞–µ–º WHITELIST –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∞
        with patch("decorators.auth.WHITELIST", {314009331: "admin"}):
            with patch("decorators.auth.ROLE_HIERARCHY", {"user": ["user"], "admin": ["admin", "user"]}):
                await start_handler(mock_admin_message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        expected_text = (
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–µ–¥–∏–∞ –∏–∑ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /help —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã."
        )
        mock_admin_message.answer.assert_called_once_with(expected_text)

    @pytest.mark.asyncio
    async def test_version_command_returns_correct_version(self, mock_admin_message):
        """–¢–µ—Å—Ç: –∫–æ–º–∞–Ω–¥–∞ /version –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é"""
        from commands.basic import version_handler
        
        # –ú–æ–∫–∞–µ–º WHITELIST –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∞
        with patch("decorators.auth.WHITELIST", {314009331: "admin"}):
            with patch("decorators.auth.ROLE_HIERARCHY", {"user": ["user"], "admin": ["admin", "user"]}):
                await version_handler(mock_admin_message)
        
        mock_admin_message.answer.assert_called_once_with(f"–í–µ—Ä—Å–∏—è –±–æ—Ç–∞: {VERSION}")

    @pytest.mark.asyncio
    async def test_help_command_for_admin_user(self, mock_admin_message):
        """–¢–µ—Å—Ç: –∫–æ–º–∞–Ω–¥–∞ /help –¥–ª—è –∞–¥–º–∏–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã"""
        from commands.basic import help_handler
        
        # –ú–æ–∫–∞–µ–º WHITELIST –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∞
        with patch("decorators.auth.WHITELIST", {314009331: "admin"}):
            with patch("decorators.auth.ROLE_HIERARCHY", {"user": ["user"], "admin": ["admin", "user"]}):
                with patch("commands.basic.WHITELIST", {314009331: "admin"}):
                    await help_handler(mock_admin_message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
        call_args = mock_admin_message.answer.call_args
        assert call_args[1]["parse_mode"] == "Markdown"
        
        response_text = call_args[0][0]
        assert "ü§ñ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**" in response_text
        assert "üìã **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**" in response_text
        assert "/start" in response_text
        assert "/help" in response_text
        assert "/version" in response_text
        assert "üõ°Ô∏è **–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:**" in response_text
        assert "/users" in response_text
        assert "–í–∞—à–∞ —Ä–æ–ª—å: **admin**" in response_text

    @pytest.mark.asyncio
    async def test_help_command_for_regular_user(self, mock_user_message):
        """–¢–µ—Å—Ç: –∫–æ–º–∞–Ω–¥–∞ /help –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã"""
        from commands.basic import help_handler
        
        # –ú–æ–∫–∞–µ–º WHITELIST –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        with patch("decorators.auth.WHITELIST", {987654321: "user"}):
            with patch("decorators.auth.ROLE_HIERARCHY", {"user": ["user"], "admin": ["admin", "user"]}):
                with patch("commands.basic.WHITELIST", {987654321: "user"}):
                    await help_handler(mock_user_message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–≤–µ—Ç –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
        call_args = mock_user_message.answer.call_args
        assert call_args[1]["parse_mode"] == "Markdown"
        
        response_text = call_args[0][0]
        assert "ü§ñ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**" in response_text
        assert "üìã **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**" in response_text
        assert "/start" in response_text
        assert "/help" in response_text
        assert "/version" in response_text
        assert "üõ°Ô∏è **–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:**" not in response_text
        assert "/users" not in response_text
        assert "–í–∞—à–∞ —Ä–æ–ª—å: **user**" in response_text

    @pytest.mark.asyncio
    async def test_commands_require_authorization(self, mock_unauthorized_message):
        """–¢–µ—Å—Ç: –∫–æ–º–∞–Ω–¥—ã —Ç—Ä–µ–±—É—é—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        from commands.basic import start_handler
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–∫–∞–∑
        await start_handler(mock_unauthorized_message)
        
        mock_unauthorized_message.answer.assert_called_once_with("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")


class TestAdminCommands:
    """–¢–µ—Å—Ç—ã –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥"""

    @pytest.mark.asyncio
    async def test_users_command_with_empty_whitelist(self, mock_admin_message):
        """–¢–µ—Å—Ç: –∫–æ–º–∞–Ω–¥–∞ /users —Å –ø—É—Å—Ç—ã–º whitelist"""
        from commands.admin import users_handler
        
        # –ú–æ–∫–∞–µ–º –ø—É—Å—Ç–æ–π WHITELIST –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∞–¥–º–∏–Ω–∞
        with patch("decorators.auth.WHITELIST", {314009331: "admin"}):
            with patch("decorators.auth.ROLE_HIERARCHY", {"user": ["user"], "admin": ["admin", "user"]}):
                with patch("commands.admin.WHITELIST", {}):
                    await users_handler(mock_admin_message)
        
        mock_admin_message.answer.assert_called_once_with("üîç Whitelist –ø—É—Å—Ç")

    @pytest.mark.asyncio
    async def test_users_command_with_users(self, mock_admin_message):
        """–¢–µ—Å—Ç: –∫–æ–º–∞–Ω–¥–∞ /users —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –≤ whitelist"""
        from commands.admin import users_handler
        
        # –ú–æ–∫–∞–µ–º WHITELIST —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        test_whitelist = {
            314009331: "admin",
            987654321: "user"
        }
        
        with patch("decorators.auth.WHITELIST", test_whitelist):
            with patch("decorators.auth.ROLE_HIERARCHY", {"user": ["user"], "admin": ["admin", "user"]}):
                with patch("commands.admin.WHITELIST", test_whitelist):
                    with patch("config.USER_REGISTRY", {}):
                        await users_handler(mock_admin_message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        call_args = mock_admin_message.answer.call_args
        assert call_args[1]["parse_mode"] == "Markdown"
        
        response_text = call_args[0][0]
        assert "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ whitelist:" in response_text
        assert "ID: `314009331` - –†–æ–ª—å: admin (–Ω–∏–∫–Ω–µ–π–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)" in response_text
        assert "ID: `987654321` - –†–æ–ª—å: user (–Ω–∏–∫–Ω–µ–π–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)" in response_text

    @pytest.mark.asyncio
    async def test_users_command_with_usernames(self, mock_admin_message):
        """–¢–µ—Å—Ç: –∫–æ–º–∞–Ω–¥–∞ /users —Å –∏–º–µ–Ω–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        from commands.admin import users_handler
        from utils.user_registry import format_user_info
        
        # –ú–æ–∫–∞–µ–º WHITELIST —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        test_whitelist = {
            314009331: "admin",
            987654321: "user"
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
        with patch("config.USER_REGISTRY", {314009331: {"username": "admin_user"}}):
            result = format_user_info(314009331, "admin")
            assert "@admin_user" in result
        
        # –ò —Ç–µ—Å—Ç –±–µ–∑ username
        with patch("config.USER_REGISTRY", {}):
            result = format_user_info(314009331, "admin")
            assert "–Ω–∏–∫–Ω–µ–π–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç" in result

    @pytest.mark.asyncio
    async def test_admin_commands_require_admin_role(self, mock_user_message):
        """–¢–µ—Å—Ç: –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã —Ç—Ä–µ–±—É—é—Ç —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞"""
        from commands.admin import users_handler
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ä–æ–ª—å—é user –Ω–µ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–¥–º–∏–Ω—Å–∫—É—é –∫–æ–º–∞–Ω–¥—É
        with patch("decorators.auth.WHITELIST", {987654321: "user"}):
            with patch("decorators.auth.ROLE_HIERARCHY", {"user": ["user"], "admin": ["admin", "user"]}):
                await users_handler(mock_user_message)
        
        mock_user_message.answer.assert_called_once_with("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å: admin")
